// AUTOGENERATED. DO NOT EDIT.
export declare const appRouter: import("@trpc/server/unstable-core-do-not-import").BuiltRouter<
  {
    ctx: any;
    meta: object;
    errorShape:
      | {
          message: string;
          cause: Error | undefined;
          code: import("@trpc/server/unstable-core-do-not-import").TRPC_ERROR_CODE_NUMBER;
          data: import("@trpc/server/unstable-core-do-not-import").DefaultErrorData;
        }
      | {
          data: {
            zodError: import("zod").typeToFlattenedError<any, string> | null;
            code:
              | "PARSE_ERROR"
              | "BAD_REQUEST"
              | "INTERNAL_SERVER_ERROR"
              | "NOT_IMPLEMENTED"
              | "BAD_GATEWAY"
              | "SERVICE_UNAVAILABLE"
              | "GATEWAY_TIMEOUT"
              | "UNAUTHORIZED"
              | "FORBIDDEN"
              | "NOT_FOUND"
              | "METHOD_NOT_SUPPORTED"
              | "TIMEOUT"
              | "CONFLICT"
              | "PRECONDITION_FAILED"
              | "PAYLOAD_TOO_LARGE"
              | "UNSUPPORTED_MEDIA_TYPE"
              | "UNPROCESSABLE_CONTENT"
              | "TOO_MANY_REQUESTS"
              | "CLIENT_CLOSED_REQUEST";
            httpStatus: number;
            path?: string | undefined;
            stack?: string | undefined;
          };
          message: string;
          code: import("@trpc/server/unstable-core-do-not-import").TRPC_ERROR_CODE_NUMBER;
        };
    transformer: true;
  },
  {
    mailbox: {
      list: import("@trpc/server").TRPCQueryProcedure<{
        input: void;
        output: {
          openTicketCount: number;
          name: string;
          id: number;
          slug: string;
        }[];
      }>;
      countByStatus: import("@trpc/server").TRPCQueryProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          conversations: {
            open: number;
            closed: number;
            spam: number;
          };
          mine: {
            open: number;
            closed: number;
            spam: number;
          };
          assigned: {
            open: number;
            closed: number;
            spam: number;
          };
          unassigned: {
            open: number;
            closed: number;
            spam: number;
          };
        };
      }>;
      get: import("@trpc/server").TRPCQueryProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          id: number;
          name: string;
          slug: string;
          isStyleLinterEnabled: boolean;
          hasMetadataEndpoint: boolean;
          metadataEndpoint: {
            url: string;
            hmacSecret: string;
            isEnabled: boolean;
            deletedAt: Date | null;
          } | null;
          slackConnected: boolean;
          slackConnectUrl: string;
          slackAlertChannel: string | null;
          responseGeneratorPrompt: string[];
          clerkOrganizationId: string;
          subscription: {
            status: string | null;
            stripeSubscriptionId: string | null;
            canceledAt: Date | null;
          } | null;
          widgetHMACSecret: string;
          widgetDisplayMode: "always" | "revenue_based" | "off";
          widgetDisplayMinValue: number | null;
          widgetHost: string | null;
          autoRespondEmailToChat: boolean;
          vipThreshold: number | null;
          vipChannelId: string | null;
          vipExpectedResponseHours: number | null;
          disableAutoResponseForVips: boolean;
        };
      }>;
      update: import("@trpc/server").TRPCMutationProcedure<{
        input: {
          mailboxSlug: string;
          responseGeneratorPrompt?: string[] | undefined;
          slackAlertChannel?: string | undefined;
          widgetDisplayMode?: "always" | "revenue_based" | "off" | undefined;
          widgetDisplayMinValue?: number | undefined;
          autoRespondEmailToChat?: boolean | undefined;
          widgetHost?: string | undefined;
          vipThreshold?: number | undefined;
          vipChannelId?: string | undefined;
          vipExpectedResponseHours?: number | undefined;
          disableAutoResponseForVips?: boolean | undefined;
        };
        output: void;
      }>;
      members: import("@trpc/server").TRPCQueryProcedure<{
        input: {
          mailboxSlug: string;
          period: "24h" | "7d" | "30d" | "1y";
          customDate?: Date | undefined;
        };
        output: {
          id: string;
          email: string | undefined;
          displayName: string | null;
          replyCount: number;
        }[];
      }>;
      latestEvents: import("@trpc/server").TRPCQueryProcedure<{
        input: {
          mailboxSlug: string;
          cursor?: Date | undefined;
        };
        output: any;
      }>;
      styleLinters: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            id: number;
            before: string;
            after: string;
          }[];
        }>;
        upsert: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            linter: {
              before: string;
              after: string;
              id?: number | undefined;
            };
          };
          output: {
            success: boolean;
          };
        }>;
        delete: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            id: number;
          };
          output: {
            success: boolean;
          };
        }>;
        setEnabled: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            enabled: boolean;
          };
          output: void;
        }>;
      };
      conversations: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            status?: unknown[] | null | undefined;
            sort?: unknown;
            search?: string | null | undefined;
            reactionType?: "thumbs-up" | "thumbs-down" | undefined;
            events?: ("request_human_support" | "resolved_by_ai")[] | undefined;
            topic?: number[] | undefined;
            limit?: number | undefined;
            cursor?: string | null | undefined;
            category?: unknown;
            assignee?: string[] | undefined;
            createdAfter?: string | undefined;
            createdBefore?: string | undefined;
            repliedBy?: string[] | undefined;
            customer?: string[] | undefined;
            isVip?: boolean | undefined;
          };
          output: {
            conversations: {
              matchedMessageText: string | null;
              id: number;
              slug: string;
              status: "open" | "closed" | "spam" | null;
              emailFrom: string | null;
              subject: string;
              conversationProvider: "gmail" | "helpscout" | "chat" | null;
              createdAt: Date;
              updatedAt: Date;
              closedAt: Date | null;
              lastUserEmailCreatedAt: Date | null;
              assignedToClerkId: string | null;
              platformCustomer: {
                isVip: boolean;
                value: string | null;
                name: string | null;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                mailboxId: number;
                email: string;
                links: Record<string, string> | null;
              } | null;
              summary: string[] | null;
              source: "email" | "chat" | "chat#prompt";
              embeddingText: string | null;
            }[];
            total: number;
            defaultSort: "oldest" | "highest_value";
            hasGmailSupportEmail: boolean;
            assignedToClerkIds: string[] | null;
            nextCursor: string | null;
          };
        }>;
        bySlug: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            slugs: string[];
          };
          output: {
            customerMetadata: {
              name: string | null;
              value: number | null;
              links: Record<string, string> | null;
              isVip: boolean;
            } | null;
            draft: null;
            messages: (
              | {
                  isNew: boolean;
                  type: "message";
                  id: number;
                  status: ("queueing" | "sent" | "failed" | "draft" | "discarded") | null;
                  body: string | null;
                  createdAt: Date;
                  role: import("../db/schema").MessageRole;
                  emailTo: string | null;
                  cc: string[];
                  bcc: string[];
                  from: string | null;
                  isPinned: boolean;
                  slackUrl: string | null;
                  workflowRun: {
                    action: import("../types/workflows").WorkflowAction;
                    message?: string | null | undefined;
                    slackChannelId?: string | undefined;
                    assignedUserId?: string | undefined;
                    runOnReplies: boolean;
                    autoReplyFromMetadata: boolean;
                    name: string;
                    order: number;
                    description: string;
                    workflow_type: string;
                    id: number;
                    prompt: string;
                  } | null;
                  draft: {
                    id: number;
                    responseToId: number;
                    body: string;
                    isStale: boolean;
                  } | null;
                  files: {
                    isInline: false;
                    sizeHuman: string;
                    presignedUrl: string;
                    previewUrl: string | null;
                    name: string;
                    id: number;
                    slug: string;
                    createdAt: Date;
                    updatedAt: Date;
                    url: string;
                    messageId: number | null;
                    mimetype: string;
                    size: number;
                    noteId: number | null;
                    isPublic: boolean;
                  }[];
                  metadata:
                    | (Partial<import("../types/customerInfo").CustomerInfo> &
                        Record<string, unknown> & {
                          reasoning?: string | null | undefined;
                        })
                    | import("../db/schema").ToolMetadata
                    | null;
                  reactionType: "thumbs-up" | "thumbs-down" | null;
                  reactionFeedback: string | null;
                  reactionCreatedAt: Date | null;
                  isFlaggedAsBad: boolean;
                  reason: string | null;
                }
              | {
                  isNew: boolean;
                  type: "note";
                  from: string | null;
                  slackUrl: string | null;
                  files: {
                    isInline: false;
                    sizeHuman: string;
                    presignedUrl: string;
                    previewUrl: string | null;
                    name: string;
                    id: number;
                    slug: string;
                    createdAt: Date;
                    updatedAt: Date;
                    url: string;
                    messageId: number | null;
                    mimetype: string;
                    size: number;
                    noteId: number | null;
                    isPublic: boolean;
                  }[];
                  id: number;
                  createdAt: Date;
                  clerkUserId: string | null;
                  body: string;
                  role: string | null;
                  slackChannel: string | null;
                  slackMessageTs: string | null;
                }
              | {
                  isNew: boolean;
                  changes: {
                    assignedToUser: string | null | undefined;
                    status?: "open" | "closed" | "spam" | undefined;
                    assignedToClerkId?: string | null | undefined;
                    isVisible?: boolean | undefined;
                  };
                  byUser: string | null;
                  eventType: "update" | "request_human_support" | "reasoning_toggled" | "resolved_by_ai";
                  type: "event";
                  id: number;
                  createdAt: Date;
                  reason: string | null;
                  byClerkUserId: string | null;
                }
            )[];
            cc: string;
            id: number;
            slug: string;
            status: "open" | "closed" | "spam" | null;
            emailFrom: string | null;
            subject: string;
            conversationProvider: "gmail" | "helpscout" | "chat" | null;
            createdAt: Date;
            updatedAt: Date;
            closedAt: Date | null;
            lastUserEmailCreatedAt: Date | null;
            assignedToClerkId: string | null;
            platformCustomer: {
              isVip: boolean;
              value: string | null;
              name: string | null;
              id: number;
              createdAt: Date;
              updatedAt: Date;
              mailboxId: number;
              email: string;
              links: Record<string, string> | null;
            } | null;
            summary: string[] | null;
            source: "email" | "chat" | "chat#prompt";
            embeddingText: string | null;
          }[];
        }>;
        get: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
          };
          output: {
            draft: {
              id: number;
              responseToId: number;
              body: string;
              isStale: boolean;
            } | null;
            customerMetadata: {
              name: string | null;
              value: number | null;
              links: Record<string, string> | null;
              isVip: boolean;
            } | null;
            messages: (
              | {
                  isNew: boolean;
                  type: "message";
                  id: number;
                  status: ("queueing" | "sent" | "failed" | "draft" | "discarded") | null;
                  body: string | null;
                  createdAt: Date;
                  role: import("../db/schema").MessageRole;
                  emailTo: string | null;
                  cc: string[];
                  bcc: string[];
                  from: string | null;
                  isPinned: boolean;
                  slackUrl: string | null;
                  workflowRun: {
                    action: import("../types/workflows").WorkflowAction;
                    message?: string | null | undefined;
                    slackChannelId?: string | undefined;
                    assignedUserId?: string | undefined;
                    runOnReplies: boolean;
                    autoReplyFromMetadata: boolean;
                    name: string;
                    order: number;
                    description: string;
                    workflow_type: string;
                    id: number;
                    prompt: string;
                  } | null;
                  draft: {
                    id: number;
                    responseToId: number;
                    body: string;
                    isStale: boolean;
                  } | null;
                  files: {
                    isInline: false;
                    sizeHuman: string;
                    presignedUrl: string;
                    previewUrl: string | null;
                    name: string;
                    id: number;
                    slug: string;
                    createdAt: Date;
                    updatedAt: Date;
                    url: string;
                    messageId: number | null;
                    mimetype: string;
                    size: number;
                    noteId: number | null;
                    isPublic: boolean;
                  }[];
                  metadata:
                    | (Partial<import("../types/customerInfo").CustomerInfo> &
                        Record<string, unknown> & {
                          reasoning?: string | null | undefined;
                        })
                    | import("../db/schema").ToolMetadata
                    | null;
                  reactionType: "thumbs-up" | "thumbs-down" | null;
                  reactionFeedback: string | null;
                  reactionCreatedAt: Date | null;
                  isFlaggedAsBad: boolean;
                  reason: string | null;
                }
              | {
                  isNew: boolean;
                  type: "note";
                  from: string | null;
                  slackUrl: string | null;
                  files: {
                    isInline: false;
                    sizeHuman: string;
                    presignedUrl: string;
                    previewUrl: string | null;
                    name: string;
                    id: number;
                    slug: string;
                    createdAt: Date;
                    updatedAt: Date;
                    url: string;
                    messageId: number | null;
                    mimetype: string;
                    size: number;
                    noteId: number | null;
                    isPublic: boolean;
                  }[];
                  id: number;
                  createdAt: Date;
                  clerkUserId: string | null;
                  body: string;
                  role: string | null;
                  slackChannel: string | null;
                  slackMessageTs: string | null;
                }
              | {
                  isNew: boolean;
                  changes: {
                    assignedToUser: string | null | undefined;
                    status?: "open" | "closed" | "spam" | undefined;
                    assignedToClerkId?: string | null | undefined;
                    isVisible?: boolean | undefined;
                  };
                  byUser: string | null;
                  eventType: "update" | "request_human_support" | "reasoning_toggled" | "resolved_by_ai";
                  type: "event";
                  id: number;
                  createdAt: Date;
                  reason: string | null;
                  byClerkUserId: string | null;
                }
            )[];
            cc: string;
            id: number;
            slug: string;
            status: "open" | "closed" | "spam" | null;
            emailFrom: string | null;
            subject: string;
            conversationProvider: "gmail" | "helpscout" | "chat" | null;
            createdAt: Date;
            updatedAt: Date;
            closedAt: Date | null;
            lastUserEmailCreatedAt: Date | null;
            assignedToClerkId: string | null;
            platformCustomer: {
              isVip: boolean;
              value: string | null;
              name: string | null;
              id: number;
              createdAt: Date;
              updatedAt: Date;
              mailboxId: number;
              email: string;
              links: Record<string, string> | null;
            } | null;
            summary: string[] | null;
            source: "email" | "chat" | "chat#prompt";
            embeddingText: string | null;
          };
        }>;
        create: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            conversation: {
              subject: string;
              cc: string[];
              bcc: string[];
              to_email_address: string;
              file_slugs: string[];
              conversation_slug: string;
              message?: string | undefined;
            };
          };
          output: void;
        }>;
        update: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
            status?: "open" | "closed" | "spam" | undefined;
            message?: string | null | undefined;
            assignedToId?: string | null | undefined;
          };
          output: void;
        }>;
        bulkUpdate: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            status: "open" | "closed" | "spam";
            conversationFilter:
              | number[]
              | {
                  status?: unknown[] | null | undefined;
                  sort?: unknown;
                  search?: string | null | undefined;
                  reactionType?: "thumbs-up" | "thumbs-down" | undefined;
                  events?: ("request_human_support" | "resolved_by_ai")[] | undefined;
                  topic?: number[] | undefined;
                  limit?: number | undefined;
                  cursor?: string | null | undefined;
                  category?: unknown;
                  assignee?: string[] | undefined;
                  createdAfter?: string | undefined;
                  createdBefore?: string | undefined;
                  repliedBy?: string[] | undefined;
                  customer?: string[] | undefined;
                  isVip?: boolean | undefined;
                };
          };
          output: {
            updatedImmediately: boolean;
          };
        }>;
        refreshDraft: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
          };
          output: void;
        }>;
        undo: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
            emailId: number;
          };
          output: void;
        }>;
        messages: {
          previousReplies: import("@trpc/server").TRPCQueryProcedure<{
            input: {
              mailboxSlug: string;
              conversationSlug: string;
            };
            output: {
              id: string;
              content: string | null;
              cleanedUpText: string;
              timestamp: string;
              conversationSubject: string | null;
              similarity: number;
            }[];
          }>;
          reply: import("@trpc/server").TRPCMutationProcedure<{
            input: {
              mailboxSlug: string;
              conversationSlug: string;
              message: string;
              responseToId: number | null;
              cc: string[];
              bcc: string[];
              fileSlugs: string[];
              shouldAutoAssign?: boolean | undefined;
              shouldClose?: boolean | undefined;
            };
            output: {
              id: number;
            };
          }>;
          flagAsBad: import("@trpc/server").TRPCMutationProcedure<{
            input: {
              mailboxSlug: string;
              conversationSlug: string;
              id: number;
              reason?: string | undefined;
            };
            output: void;
          }>;
          reactionCount: import("@trpc/server").TRPCQueryProcedure<{
            input: {
              mailboxSlug: string;
              period: "hourly" | "daily" | "monthly";
              startDate: Date;
            };
            output: {
              count: number;
              timePeriod: string;
              reactionType: "thumbs-up" | "thumbs-down" | null;
            }[];
          }>;
          statusByTypeCount: import("@trpc/server").TRPCQueryProcedure<{
            input: {
              mailboxSlug: string;
              startDate: Date;
            };
            output: [
              {
                type: string;
                count: number;
              },
              {
                type: string;
                count: number;
              },
              {
                type: string;
                count: number;
              },
            ];
          }>;
        };
        files: {
          initiateUpload: import("@trpc/server").TRPCMutationProcedure<{
            input: {
              file: {
                isInline: boolean;
                fileName: string;
                fileSize: number;
              };
              conversationSlug: string;
            };
            output: {
              file: {
                slug: string;
                name: string;
                url: string;
              };
              signedRequest: import("@aws-sdk/s3-presigned-post").PresignedPost;
            };
          }>;
        };
        tools: {
          list: import("@trpc/server").TRPCQueryProcedure<{
            input: {
              mailboxSlug: string;
              conversationSlug: string;
            };
            output: {
              recommended: import("../lib/tools/apiTool").ToolAvailableResult[];
              all: {
                name: string;
                slug: string;
                description: string;
                parameterTypes: import("../db/schema").ToolParameter[];
              }[];
            };
          }>;
          run: import("@trpc/server").TRPCMutationProcedure<{
            input: {
              mailboxSlug: string;
              conversationSlug: string;
              params: Record<string, any>;
              tool: string;
            };
            output:
              | {
                  success: boolean;
                  message: string;
                  data?: undefined;
                }
              | {
                  success: boolean;
                  message?: undefined;
                  data?: undefined;
                }
              | {
                  data: any;
                  success: boolean;
                  message?: undefined;
                };
          }>;
        };
        notes: {
          add: import("@trpc/server").TRPCMutationProcedure<{
            input: {
              mailboxSlug: string;
              conversationSlug: string;
              message: string;
              fileSlugs: string[];
            };
            output: {
              id: number;
            };
          }>;
        };
        findSimilar: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
          };
          output: {
            conversations: {
              id: number;
              slug: string;
              status: "open" | "closed" | "spam" | null;
              emailFrom: string | null;
              subject: string;
              conversationProvider: "gmail" | "helpscout" | "chat" | null;
              createdAt: Date;
              updatedAt: Date;
              closedAt: Date | null;
              lastUserEmailCreatedAt: Date | null;
              assignedToClerkId: string | null;
              platformCustomer: {
                isVip: boolean;
                value: string | null;
                name: string | null;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                mailboxId: number;
                email: string;
                links: Record<string, string> | null;
              } | null;
              summary: string[] | null;
              source: "email" | "chat" | "chat#prompt";
              embeddingText: string | null;
            }[];
            similarityMap: Record<string, number> | undefined;
          } | null;
        }>;
        alertCounts: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            hasConversations: boolean;
            assignedToMe: number;
            vipOverdue: number;
            vipExpectedResponseHours: any;
          };
        }>;
      };
      faqs: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            id: number;
            content: string;
            enabled: boolean;
            suggested: boolean;
            suggestedReplacementForId: number | null;
            mailboxId: number;
            createdAt: Date;
            updatedAt: Date;
          }[];
        }>;
        create: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            content: string;
          };
          output: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            mailboxId: number;
            content: string;
            embedding: number[] | null;
            enabled: boolean;
            suggested: boolean;
            suggestedReplacementForId: number | null;
            messageId: number | null;
            unused_question: string;
            unused_body: string;
          };
        }>;
        update: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            id: number;
            content?: string | undefined;
            enabled?: boolean | undefined;
          };
          output: {
            id: number;
            content: string;
            mailboxId: number;
            embedding: number[] | null;
            enabled: boolean;
            suggested: boolean;
            suggestedReplacementForId: number | null;
            messageId: number | null;
            unused_question: string;
            unused_body: string;
            createdAt: Date;
            updatedAt: Date;
          };
        }>;
        delete: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            id: number;
          };
          output: void;
        }>;
      };
      workflows: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            action: import("../types/workflows").WorkflowAction;
            message?: string | null | undefined;
            slackChannelId?: string | undefined;
            assignedUserId?: string | undefined;
            prompt: string;
            description: string;
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            mailboxId: number;
            deletedAt: Date | null;
            order: number;
            workflowType: "default" | "freeform";
            runOnReplies: boolean;
            autoReplyFromMetadata: boolean;
            workflowActions: {
              id: number;
              createdAt: Date;
              updatedAt: Date;
              workflowId: number;
              actionType:
                | "send_email"
                | "send_auto_reply_from_metadata"
                | "change_status"
                | "change_helper_status"
                | "add_note"
                | "assign_user";
              actionValue: string;
            }[];
            groups: {
              id: number;
              createdAt: Date;
              updatedAt: Date;
              workflowId: number;
              conds: {
                value: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                field: import("../db/schema").WorkflowConditionFieldType;
                operator: import("../db/schema").WorkflowConditionOperatorType;
                workflowConditionGroupId: number;
              }[];
            }[];
          }[];
        }>;
        set: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            order: number;
            runOnReplies: boolean;
            autoReplyFromMetadata: boolean;
            prompt: string;
            action:
              | "unknown"
              | "assign_user"
              | "close_ticket"
              | "mark_spam"
              | "reply_and_close_ticket"
              | "reply_and_set_open";
            message?: string | null | undefined;
            name?: string | undefined;
            id?: number | undefined;
            slackChannelId?: string | null | undefined;
            assignedUserId?: string | null | undefined;
          };
          output: void;
        }>;
        delete: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            id: number;
          };
          output: void;
        }>;
        reorder: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            positions: number[];
          };
          output: void;
        }>;
        listMatchingConversations: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
            prompt: string;
          };
          output: {
            conversations: import("../app/(dashboard)/mailboxes/[mailbox_slug]/settings/_components/automaticWorkflowsSetting").MatchingConversation[];
          };
        }>;
        generateWorkflowPrompt: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
          };
          output: {
            prompt: string;
          };
        }>;
        answerWithWorkflow: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            conversationSlug: string;
            workflow: {
              order: number;
              runOnReplies: boolean;
              autoReplyFromMetadata: boolean;
              prompt: string;
              action:
                | "unknown"
                | "assign_user"
                | "close_ticket"
                | "mark_spam"
                | "reply_and_close_ticket"
                | "reply_and_set_open";
              message?: string | null | undefined;
              name?: string | undefined;
              id?: number | undefined;
              slackChannelId?: string | null | undefined;
              assignedUserId?: string | null | undefined;
            };
            matchingSlugs: string[];
          };
          output: void;
        }>;
      };
      slack: {
        channels: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            id: string;
            name: string;
          }[];
        }>;
        disconnect: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: void;
        }>;
      };
      tools: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            id: number;
            name: string;
            baseUrl: string | null;
            tools: {
              path: string;
              toolApiId: number;
              description: string;
              name: string;
              id: number;
              slug: string;
              url: string;
              enabled: boolean;
              requestMethod: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
              parameters: import("../db/schema").ToolParameter[] | null;
              availableInChat: boolean;
            }[];
          }[];
        }>;
        import: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            name: string;
            apiKey: string;
            schema?: string | undefined;
            url?: string | undefined;
          };
          output: {
            success: boolean;
          };
        }>;
        update: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            toolId: number;
            settings: {
              enabled: boolean;
              availableInChat: boolean;
            };
          };
          output: {
            success: boolean;
          };
        }>;
        deleteApi: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            apiId: number;
          };
          output: {
            success: boolean;
          };
        }>;
        refreshApi: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            apiId: number;
            schema?: string | undefined;
          };
          output: {
            success: boolean;
          };
        }>;
      };
      customers: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
            search?: string | undefined;
          };
          output: {
            id: number;
            email: string;
          }[];
        }>;
      };
      websites: {
        list: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output: {
            latestCrawl:
              | {
                  status: string;
                  name: string;
                  id: number;
                  createdAt: Date;
                  updatedAt: Date;
                  metadata: import("../db/schema").CrawlMetadata | null;
                  websiteId: number;
                  errorMessage: string | null;
                  startedAt: Date;
                  completedAt: Date | null;
                }
              | undefined;
            pagesCount: number;
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            url: string;
            mailboxId: number;
            deletedAt: Date | null;
            crawls: {
              status: string;
              name: string;
              id: number;
              createdAt: Date;
              updatedAt: Date;
              metadata: import("../db/schema").CrawlMetadata | null;
              websiteId: number;
              errorMessage: string | null;
              startedAt: Date;
              completedAt: Date | null;
            }[];
          }[];
        }>;
        create: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            name: string;
            url: string;
          };
          output: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            url: string;
            mailboxId: number;
            deletedAt: Date | null;
          };
        }>;
        delete: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            websiteId: number;
          };
          output: {
            success: boolean;
          };
        }>;
        triggerCrawl: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            websiteId: number;
          };
          output: {
            status: string;
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            metadata: import("../db/schema").CrawlMetadata | null;
            websiteId: number;
            errorMessage: string | null;
            startedAt: Date;
            completedAt: Date | null;
          };
        }>;
      };
      metadataEndpoint: {
        create: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
            url: string;
          };
          output:
            | {
                success: boolean;
                error: undefined;
              }
            | {
                success: boolean;
                error: string;
              };
        }>;
        delete: import("@trpc/server").TRPCMutationProcedure<{
          input: {
            mailboxSlug: string;
          };
          output:
            | {
                success: boolean;
                error: undefined;
              }
            | {
                success: boolean;
                error: string;
              };
        }>;
        test: import("@trpc/server").TRPCQueryProcedure<{
          input: {
            mailboxSlug: string;
          };
          output:
            | {
                success: boolean;
                error: undefined;
              }
            | {
                success: boolean;
                error: string;
              };
        }>;
      };
    };
    organization: {
      createDefaultOrganization: import("@trpc/server").TRPCMutationProcedure<{
        input: void;
        output: {
          id: string;
        };
      }>;
      getOnboardingStatus: import("@trpc/server").TRPCQueryProcedure<{
        input: void;
        output: {
          trialInfo: {
            freeTrialEndsAt: Date | null;
            resolutionsCount: {} | null;
            resolutionsLimit: number;
            subscriptionStatus: import("../lib/data/organization").SubscriptionStatus;
          };
        };
      }>;
      getMembers: import("@trpc/server").TRPCQueryProcedure<{
        input: void;
        output: {
          id: string;
          displayName: string;
        }[];
      }>;
    };
    user: {
      getSignInToken: import("@trpc/server").TRPCQueryProcedure<{
        input: void;
        output: string;
      }>;
    };
    gmailSupportEmail: {
      get: import("@trpc/server").TRPCQueryProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          id: number;
          email: string;
          createdAt: Date;
        } | null;
      }>;
      create: import("@trpc/server").TRPCMutationProcedure<{
        input: {
          mailboxSlug: string;
          email: string;
          expiresAt: Date;
          accessToken: string;
          refreshToken: string;
        };
        output: void;
      }>;
      delete: import("@trpc/server").TRPCMutationProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          message: string;
        };
      }>;
    };
    billing: {
      startCheckout: import("@trpc/server").TRPCMutationProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          url: string;
        };
      }>;
      subscribe: import("@trpc/server").TRPCMutationProcedure<{
        input: {
          mailboxSlug: string;
          sessionId: string;
        };
        output: {
          success: boolean;
          message: string;
        };
      }>;
      manage: import("@trpc/server").TRPCMutationProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          url: string;
        };
      }>;
      get: import("@trpc/server").TRPCQueryProcedure<{
        input: {
          mailboxSlug: string;
        };
        output: {
          unitAmount: number;
          aiResolutions: number;
          currentPeriodStart: Date;
          currentPeriodEnd: Date;
        } | null;
      }>;
    };
    isSignedIn: import("@trpc/server").TRPCQueryProcedure<{
      input: void;
      output: boolean;
    }>;
    testing: import("@trpc/server").TRPCQueryProcedure<{
      input: void;
      output: (
        | {
            id: number;
            name: string;
            createdAt: Date;
            isActive: boolean;
            tags: string[];
            nested?: undefined;
          }
        | {
            id: number;
            name: string;
            createdAt: Date;
            isActive: boolean;
            nested: {
              value: bigint;
              map: Map<string, string>;
              set: Set<number>;
            };
            tags?: undefined;
          }
      )[];
    }>;
  }
>;
export type API = typeof appRouter;
